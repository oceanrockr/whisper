[pytest]
# Pytest Configuration for Veleron Whisper Voice-to-Text Project

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Minimum Python version
minversion = 3.13

# Command line options
addopts =
    # Verbose output
    -v
    # Show summary of all test outcomes
    -ra
    # Show local variables in tracebacks
    -l
    # Strict markers - fail on unknown markers
    --strict-markers
    # Show warnings
    -W default
    # Coverage options (uncomment to enable by default)
    # --cov=.
    # --cov-report=html
    # --cov-report=term-missing

# Markers for test categorization
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    requires_cuda: marks tests that require CUDA/GPU
    requires_audio: marks tests that require audio hardware
    gui: marks tests that test GUI components
    cli: marks tests that test CLI functionality
    manual: marks tests requiring manual execution (user interaction, admin privileges)
    performance: marks performance benchmark tests
    e2e: marks end-to-end tests

# Timeout settings (in seconds)
timeout = 300
timeout_method = thread

# Console output
console_output_style = progress

# Log settings
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File log settings
log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Coverage settings
[coverage:run]
source = .
omit =
    */tests/*
    */venv/*
    */site-packages/*
    */__pycache__/*
    */conftest.py

[coverage:report]
precision = 2
show_missing = true
skip_covered = false

exclude_lines =
    # Default exclusions
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod

    # Debug-only code
    if self.debug:
    if settings.DEBUG

    # Non-runnable code
    if 0:
    if False:

    # Type checking
    if typing.TYPE_CHECKING:

[coverage:html]
directory = htmlcov
